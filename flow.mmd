flowchart LR
   Client -->|request wrap-http-response| A[/Middleware/]
   A[/Middleware/] -->|Return response| Client
   subgraph Show
       E[[Handler:todo-show]] -->|1.Request :todo-id todo-item| F[(Db:find-first-todo)]
       F[(Db:find-first-todo)] -->|return :todo-item| E[[Handler:todo-show]]
       E[[Handler:todo-show]] -->|2.Call :todo-item Show| G(View:todo-show)
       G(View:todo-show) -->|Return response| E[[Handler:todo-show]]
       E[[Handler:todo-show]] -->|return response| A[/Middleware/]
   end
   subgraph Home
       A[/Middleware/] -->|Call :void Home| B[[Handler:todo-index]]
       B[[Handler:todo-index]] -->|1.Request :void todo-list| C[(Db:find-todo-all)]
       C[(Db:find-todo-all)] -->|Return :todo-list| B[[Handler:todo-index]]
       B[[Handler:todo-index]] -->|2.Request :todo-list response| D(View:todo-index-view)
       D(View:todo-index-view) -.->|Request :todo-item| E[[Handler:todo-show]]
       D(View:todo-index-view) -->|Return response| B[[Handler:todo-index]]
       B[[Handler:todo-index]] -->|Return response| A[/Middleware/]
   end
   subgraph New
       A[/Middleware/] -->|Call :void New| H[[Handler:todo-new]]       
       H[[Handler:todo-new]] -->|1.Call :void :todo-item| I(View:todo-new)
       I(View:todo-new) -.->|Post :todo-item New| L[[Handler:todo-new-post]]
       L[[Handler:todo-new-post]] -->|Util:validate| T1{Util:with-fallback}
       T1{Util:with-fallback} -->|1.Request :todo-item todo-id| J[(Db:save-todo)]
       T1{Util:with-fallback} -.->|2.Validation Error| H[[Handler:todo-new]]
       J[(Db:save-todo)] -->|Return :todo-id| L[[Handler:todo-new-post]]
       L[[Handler:todo-new-post]] ==>|2.Call :todo-id Show| E[[Handler:todo-show]]
       D(View:todo-index-view) -.->|Call :void New|H[[Handler:todo-new]]
   end
   subgraph Edit
       A[/Middleware/] -->|Call :todo-id Edit| K[[Handler:todo-edit]]
       K[[Handler:todo-edit]] -->|1.Request :todo-id todo-item| F[(Db:find-first-todo)]
       F[(Db:find-first-todo)] -->|return :todo-item| K[[Handler:todo-edit]]
       K[[Handler:todo-edit]] -->|2.Call :todo-item Edit| O(View:todo-edit)
       O(View:todo-edit)-.->|Post :todo-item Edit| M[[Handler:todo-edit-post]]
       M[[Handler:todo-edit-post]] -->|Util.validate| T2{Util:with-fallback}
       T2{Util:with-fallback} -->|1.Request :todo-item todo-id| N[(Db:update-todo)]
       T2{Util:with-fallback} -.->|2.Validation Error| M[[Handler:todo-new]]
       N[(Db:update-todo)] -->|Return :todo-id| M[[Handler:todo-edit-post]]
       M[[Handler:todo-edit-post]] ==>|2.Call :todo-id Show| E[[Handler:todo-show]]
       G(View:todo-show) -.->|Call :todo-id Edit|K[[Handler:todo-edit]]
   end
   subgraph Delete
       A[/Middleware/] -->|Call :todo-id Delete| P[[Handler:todo-delete]]
       P[[Handler:todo-delete]] -->|1.Request :todo-id todo-item| F[(Db:find-first-todo)]
       F[(Db:find-first-todo)] -->|return :todo-item| P[[Handler:todo-delete]]
       P[[Handler:todo-delete]] -->|2.Call :todo-item Delete| Q(View:todo-delete)
       Q(View:todo-delete) -.->|Post :todo-item Delete| R[[Handler:todo-delete-post]]
       R[[Handler:todo-delete-post]] -->|1.Request :todo-item todo:id| S[(Db:delete-todo)]
       S[(Db:delete-todo)] -->|Return :void| R[[Handler:todo-delete-post]]
       R[[Handler:todo-delete-post]] ==>|2.Call :void Home| B[[Handler:todo-index]]
       G(View:todo-show) -.->|Call :todo-id Delete|P[[Handler:todo-delete]]
   end
